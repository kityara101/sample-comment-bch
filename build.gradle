import com.dtg.sample.ReleaseVersionTask
import com.dtg.sample.ProjectVersion

apply plugin: "java"
apply plugin: "war"
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

description = "This is sample ToDo project."


repositories {
    mavenCentral()
}

dependencies {
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}




task loadVersion {
    project.ext.versionFile = file("version.properties")
    version = readVersion()
}

task printVersion (group: "versioning", description: "Prints project version") {
    doLast {
        logger.quiet "Version: $version"
    }
}

task makeReleaseVersion(type: ReleaseVersionTask ) {
    release = version.release
    destFile = versionFile
}

task incrementMajorVersion(group: "versioning") {
    doLast {
        String currentVersion = version.toString()
        version.major++
        String newVersion = version.toString()
        logger.info "Incrementing major version number: $currentVersion -> $newVersion"
        ant.propertyfile(file: versionFile) {
            entry(key: "major", type: "int", operation: "+", value: 1)
        }
    }
} 

task incrementMinorVersion(group: "versioning") {
    doLast {
        String currentVersion = version.toString()
        version.mno++
        String newVersion = version.toString()
        logger.info "Incrementing minor version number: $currentVersion -> $newVersion"
        ant.propertyfile(file: versionFile) {
            entry(key: "minor", type: "int", operation: "+", value: 1)
        }
    }
} 


task createDistribution(type: Zip, group: "release", dependsOn: makeReleaseVersion) {
    from war {
        into "build"
    }
    from (sourceSets*.allSource) {
        into "src"
    }
    from (rootDir) {
        include versionFile.name
    }
}

task backupDistribution(type: Copy, group: 'release', description: "Builds and backups distribution package.", dependsOn: createDistribution) {
    from createDistribution
    into "$buildDir/backup"
}

task release(group: "release", description: "Makes project release.", dependsOn: [createDistribution, backupDistribution]) {

}



ProjectVersion readVersion() {

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exists: $versionFile.canonicalPath");
    }

    Properties versionProps = new Properties();
    versionFile.withInputStream{ stream -> versionProps.load(stream)};

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

configurations {
    cargo {
        description = "Classpath for Cargo Ant tasks"
        visible = false
    }
}


logger.quiet war.outputs.files.singleFile.name

task deployToLocalTomcat {
    doLast {
        FileTree cargoDeps = configurations.getByName("cargo").asFileTree
        ant.taskdef(resource: "cargo.tasks", classpath: cargoDeps.asPath)
        ant.cargo(containerId: "tomcat7x", action: "run", output: "$buildDir/output.log") {
            configuration {
                deployable(type: "war", file: "sample-comment-bch-3.6.jar")
            }
            zipUrlInstaller(installUrl: "http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip")
        }

    }
}

ext.cargoGroup = "org.codehaus.cargo"
ext.cargoVersion = "1.3.1"

dependencies {
    cargo group: cargoGroup, name: "cargo-core-uberjar", version: cargoVersion
    cargo "$cargoGroup:cargo-ant:$cargoVersion"
}